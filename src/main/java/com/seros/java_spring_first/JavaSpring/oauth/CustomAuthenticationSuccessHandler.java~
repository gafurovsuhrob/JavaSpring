package com.seros.java_spring_first.JavaSpring.oauth;

import com.seros.java_spring_first.JavaSpring.utils.JwtTokenProvider;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class CustomAuthenticationSuccessHandler implements AuthenticationSuccessHandler {

    private final JwtTokenProvider jwtTokenProvider;

    public CustomAuthenticationSuccessHandler(JwtTokenProvider jwtTokenProvider) {
        this.jwtTokenProvider = jwtTokenProvider;
    }

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        String username = authentication.getName(); // Получаем имя пользователя
        String token = jwtTokenProvider.generateToken(username); // Генерация JWT токена

        // Устанавливаем токен в заголовок
        response.addHeader("Authorization", "Bearer " + token);

        // Либо можно отправить токен в Cookie
        Cookie jwtCookie = new Cookie("JWT_TOKEN", token);
        jwtCookie.setHttpOnly(true);
        jwtCookie.setMaxAge(86400); // Устанавливаем время жизни cookie
        response.addCookie(jwtCookie);

        response.sendRedirect("/api/v1/auth/success");
    }
}


